
// 1. 指令的概念
// 指令是vue为开发者提供的模版语法，用于辅助开发者渲染页面的基本结构

// vue中的指令按照不同的用途可以分为如下6大类：
// 1）内容渲染指令
// 2）属性绑定指令
// 3）事件绑定指令
// 4）双向绑定指令
// 5）条件渲染指令
// 6）列表渲染指令

// 注意：指令是vue开发中最基础、最常用、最简单的知识点

// 1.1 内容渲染指令
// 内容渲染指令用来辅助开发者渲染DOM元素的文本内容。常用的内容渲染指令有如下三个：
//   v-Text
//   {{ }}
//   v-html

// 示例：
// v-text指令会覆盖元素内默认值
//   把username对应的值，渲染到第一个p标签中
/* <p v-text="username"></p>*/
// 把 gendar对应的值，渲染到第二个p标签中
// 注意，第二个p标签中，默认的文本性别回呗gendar的值覆盖掉
/* <p v-text="gender">性别</p> */

// {{ }}语法
// vue提供的{{ }}语法，专门用来解决v-text会覆盖默认文本内容的问题。这种{{ }}语法的专业名称是插值表达式

// 使用{{ }}插值表达式， 将对应的值渲染到元素的内容节点中
// 同时保留元素自身的默认值
/* <p>姓名： {{username}}</> */
/* <p>姓名： {{gender}}</> */

// v-html
// v-text指令和插值表达式只能渲染纯文本的内容。如果把要包含HTML标签的字符串渲染为页面的HTML元素
// 则需要用到v-html这个指令

// 假设data中定义了名为description的数据，数据的值为包含HTML标签的字符串

/* <p v-html="description"></p> */

// v-text指令的缺点：会覆盖原有的内容
// {{ }}: 插值表达式：在实际开发中用的最多，只是内容的占位符，不会覆盖原有的内容
// v-html指令的作用：可以把带有标签的字符串，渲染成真正的HTML内容