
// 什么是组件化开发？
// 组件化开发指的是：根据封装的思想，把页面上可充用的UI封装为组件，从而方便项目的开发和维护

// vue中的组件化开发
// vue是一个支持组件化开发的前端框架
// vue中规定：组件的后缀名是.vue。之前接触到的App.vue文件本质上就是一个vue的组件

// vue组件的三个组成部分
// 每个.vue组件都由3部分构成，分别是：
//   template  -> 组件的摸板结构
//   script->组件的JavaScript行为
//   style->组件的样式

// 组件之间的父子关系
// 见图
// 组件在封装好之后，彼此之间是相互独立的。
// 在使用组件的时候，根据彼此形成的嵌套关系，形成了父子关系、兄弟关系

//4.1 使用组件的三个步骤

// 步骤1: 使用import语法导入需要使用的组件

// 步骤2：使用components节点注册组件

// 步骤3: 以标签形式使用刚才注册的组件

// 4.2 通过Components注册的是私有子组件
// 例如：
// 在组件A的components节点下，注册了组件F
// 则组件F只能用在组件A中，不能用在组件C中

// 4.3 注册全局组件
// 在 vue 项目的main.js入口文件中，通过Vue.component()方法，可以注册全局组件。示例代码为：

// 导入需要全局注册的组件
// import Count from  '@/components/count.vue'

// 参数1： 字符串格式，表示组件的注册名称
// 参数2: 需要被全局注册的那个组件
// Vue.components('MyCount', Count)

// 5.组件的props
// props是组件的自定义属性，在封装通用组件的时候，合理的使用props可以极大地提高组件的复用性
// 他的语法格式如下：
//   export default {
//     // 组件的自定义属性
//     props: ['自定义属性A', '自定义属性B', '其他自定义属性'],

//     // 组件的私有数据
//     data() {
//         return {}
//     },
//   }

//5.1 props是只读的
// vue规定： 组件中封装的自定义属性是只读的，程序员不能直接修改props的值。否则会直接报错


// 5.2 props中的 default 默认值
// 在声明自定义属性时，可以通过default来定义属性的默认值。示例代码为：
// export default {
//     props: {
//         init: {
//             // 用default 属性定义属性的默认值
//             default: 0
//         }
//     }
// }

// 5.3 props的typoe值类型
// 在声明自定义属性时， 可以通过type来定义属性的值类型。示例代码为：
// export default {
//     props: {
//         init: {
//             // 用 default 属性定义属性的默认值
//             default: 0,
//             // 用 type 属性定义属性的值类型
//             // 如果传递过来的值不符合此类型，则会在终端报错
//             type: Number

//         }
//     }
// }

// 5.4 props的required必填项

